import { NextResponse } from 'next/server';
import { Firestore } from '@google-cloud/firestore';
import dotenv from 'dotenv';

// Load environment variables from .env.local file only in development
if (process.env.NODE_ENV === 'development') {
  dotenv.config();
}

const firestoreConfig: any = {};
firestoreConfig.projectId = process.env.PROJECT_ID;

if (process.env.NODE_ENV === 'development') {
  firestoreConfig.keyFilename = process.env.GOOGLE_APPLICATION_CREDENTIALS_PATH;
}

const firestore = new Firestore(firestoreConfig);

  export type Suggestion = {
    id?: string; // id is optional as it will be generated by Firestore
    author: string;
    votes: number;
    title: string;
    category: string[];
    suggestionstatus: string;
    dateCreated: Date;
  };

  const addSuggestion = async (newSuggestion: Omit<Suggestion, 'id' | 'dateCreated'>): Promise<void> => {
    const suggestionWithDate = {
      ...newSuggestion,
      dateCreated: new Date(), // Set the dateCreated to the current date and time
    };
  
    try {
      await firestore.collection('suggestions').add(suggestionWithDate);
      console.log('Suggestion added successfully!');
    } catch (error: any) {
      console.error('Error adding suggestion:', error);
      throw error;
    }
  };

export async function POST(request: Request) {
    try {
    const { title, author, votes, category, suggestionstatus } = await request.json();
    await addSuggestion({ title, author, votes, category, suggestionstatus });
    return NextResponse.json({ message: 'Suggestion added successfully' }, { status: 200 });
    }
    catch (error: any) {
        return NextResponse.json({ message: 'Failed to add suggestion', error: error.message }, { status: 500 });
    }
}